# -*- coding: utf-8 -*-
"""movie_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K3GZzxu7VgElQFGaZwtFpPunI3Alg0lX

**Movie Recommendation System**

**Objective**
The objective of movie recommendation system is to create a movie system using machine learning techniques to provide personalized movie suggestions to users, enhancing their movie-watching experience by analyzing their preferences, viewing history, and similarities to other users.

**Datasource**
The Movie Recommendation System will utilize a diverse dataset sourced from publicly available movie databases and streaming platforms. This dataset includes information such as movie titles, genres, user ratings, reviews, and viewing histories, enabling the system to make informed recommendations based on user preferences and behavior.

**Import Library**
"""

import pandas as pd

import numpy as np

"""**Import Dataset**"""

df = pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

"""**Get Feature Selection**"""

df_features=df[['Movie_Genre','Movie_Keywords','Movie_Tagline', 'Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

X = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] +' '+ df_features['Movie_Cast'] + ' ' + df_features['Movie_Director']

X

X.shape

"""**Get Feature Text Conversion to Token**"""

from sklearn.feature_extraction.text import TfidfVectorizer

Tfidf = TfidfVectorizer()

X = Tfidf.fit_transform(X)

X.shape

print(X)

"""**Get Similarity Score using Cosine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_score = cosine_similarity(X)

Similarity_score

Similarity_score.shape

"""**Get Movie Name as Input from User and Validate for Closest Spelling**"""

Favourite_Movie_Name = input('Enter your favourite movie name:')

All_Movies_Title_List= df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name,All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie = df[ df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score = list(enumerate(Similarity_score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""**Get All Movies Sort Based on Recommendation Score wrt Favourite Movie**"""

Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1] , reverse = True)
print(Sorted_Similar_Movies)

print( ' Top 30 Movies Suggested for You : \n ' )
i=1
for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index= df[df.index == index ]['Movie_Title'].values[0]
  if(i<31):
    print(i , '.',title_from_index )
    i+=1

"""**Top 10 Movie Recommendation System**"""

Movie_Name = input('Enter your favourite movie name:')
list_of_all_titles= df['Movie_Title'].tolist()
Find_Close_Match = difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match = Find_Close_Match[0]
Index_of_Movie = df[ df.Movie_Title == Close_Match]['Movie_ID'].values[0]
Recommendation_Score = list(enumerate(Similarity_score[Index_of_Movie]))
Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1] , reverse = True)
print( ' Top 30 Movies Suggested for You : \n ' )
i=1
for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index= df[df.index == index ]['Movie_Title'].values
  if(i<11):
    print(i , '.',title_from_index )
    i+=1